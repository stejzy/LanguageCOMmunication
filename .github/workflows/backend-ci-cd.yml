name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:

  # 1) Build & test
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & test
        run: mvn clean verify
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          SUPPORT_EMAIL: ${{ secrets.SUPPORT_EMAIL }}
          APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

  # 2) Build image & push to ECR
  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push image
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: flashlingo-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE backend/
          docker push $IMAGE
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

  # 3) Deploy on EC2-based ECS
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: eu-central-1

      - name: Get AWS Account ID
        id: account
        run: |
          id=$(aws sts get-caller-identity --query Account --output text)
          echo "name=account::$id" >> "$GITHUB_OUTPUT"

      - name: Render task definition
        run: |
          sed \
            -e "s|<ACCOUNT_ID>|${{ steps.account.outputs.account }}|g" \
            .github/task-definition.template.json > rendered-task-def.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: rendered-task-def.json
          container-name: flashlingo-repo
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: flashlingo-service
          cluster: flashlingo-cluster
          force-new-deployment: true